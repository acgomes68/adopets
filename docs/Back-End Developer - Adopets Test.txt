Já fiz testes muito semelhantes usando Node com Express e Jest para o TDD, Lúmen (versão reduzida do framework PHP Laravel voltado para APIs) e PHP Unit e Python com Flask.

Então, aproveitei um modelo que já possuía e atualizei as entidades e, consequentemente, as mensagens do teste de cobertura, assim como alguns asserts. Costumo simular um mockup com a biblioteca fake e o SQLite somente em memória, sem escrita em disco. Não pretendia fazer um CI/CD, não sei se essa era proposta também.

Estava fazendo tudo com imagens Docker que já havia construído antes com o básico para cada ambiente.

Os logs iriam ficar no MongoDB por não ter tanta necessidade de relacionamento e ser uma base com grande possibilidade de crescimento. As demais informações ficariam em uma base SQL devido o forte relacionamento e a facilidade na construção do CRUD, além  das consultas por filtro, ordenação e paginação.

A autenticação do cadastro com JWT e iria criar uma tabela de categorias para fazer o relacionamento com produtos.

O que eu fiz até o momento está no GitLab, mas ainda não criei o endpoint no Heroku.



Opa, Arthur, tudo bem?

então, antes de mais nada, muito obrigado pela oportunidade.
lamento muito que essa situação tenha acontecido e tenha alterado os seus planos, inclusive aproveitei para solicitar uns dias no-tech na empresa para descansar a cabeça desses dias tumultuados, portanto, fui ver seu e-mail mesmo na noite de sexta...rs

mas, enfim, está lá...

tive que fazer algumas adaptações do que já havia comentado:
- mudei a base de dados de MySQL para Postgres porque lembrei que o Heroku tem essa exigência;
- mudei de Gitlab para Github para ficar mais fácil vocês acessarem por não haver a necessidade de um repositório privado;
- deixei um README explicativo, mas está em pt-br, caso queira fazer um teste local ou dar uma olhada mais fácil no código;
- também deixei o endpoint no Heroku que não requer nenhuma instalação, portanto mais fácil de testar a execução, mas não tem o código;
- usei o eslint, prettier e a extensão EditorConfig do VSCode para estilização e formatação do código;
- usei o sequelize para persistência de dados SQL no Postgres;
- usei o mongoose para persistência de dados no MongoDB;
- usei o yup para consistência das informações postadas; 
- usei o youch para o tratamento de exceções; 
- usei o nodemon só como dev-dependency;
- procurei deixar as mensagens e comentários com o meu "sofrível" inglês como solicitado;
- fiz um frontend bem tosco só para ficar mais fácil de testar as APIs, por favor não mostre para os frontends e a galera de UI/UX sob pena de eu ser imediatamente condenado à fogueira eterna...rs;
- até pensei em substituir o MongoDB pelo Redis para registro dos logs através de uma fila, mas não daria tempo;
- o restante é o que já havia comentado no e-mail anterior, não deu pra dar aquela caprichada no código como eu gostaria, mas, espero que atenda...

independente do desfecho, MUITO OBRIGADO!



https://github.com/acgomes68/adopets
docker-compose up -d
docker-compose down -v --remove-orphans
